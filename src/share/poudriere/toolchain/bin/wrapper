#!/bin/sh

die() {
	echo "${*}" >&2
	exit 1
}

if [ -z "${CHERIBSD_VERSION}" ]; then
	CHERIBSD_VERSION=$(awk '/^#define[[:space:]]+__CheriBSD_version/{print $3}' /usr/include/sys/param.h)
fi
if [ -z "${CHERIBSD_VERSION}" ]; then
	CHERIBSD_VERSION=0
fi

TOOLCHAIN_ROOT="/toolchain"
TOOLCHAIN_LOCALBASE="/toolchain/usr/local64"
TOOLCHAIN_LOCALBASE_BIN="${TOOLCHAIN_LOCALBASE}/bin"
TOOLCHAIN_LOCALBASE_LIB="${TOOLCHAIN_LOCALBASE}/lib"

#
# Get information on a toolchain program being executed and a target
# architecture.
#
# basename(1) and sysctl(8) must be executed before LD_LIBRARY_PATH is set.
#
prog=$(basename "${0}")
if [ -z "${MACHINE_ARCH}" ]; then
	arch="$(sysctl -n hw.machine_arch)"
else
	arch="${MACHINE_ARCH}"
fi

#
# Compute toolchain flags.
#
if [ -n "${QEMU_EMULATING}" ]; then
	arch_cflags="-target aarch64-unknown-freebsd14.0"
else
	arch_cflags=""
fi
arch_objdump_flags=""
case "${arch}" in
aarch64)
	if [ -z "${MACHINE_ARCH_HYBRID}" ]; then
		# Build for vanilla aarch64 which can be used on
		# CheriBSD/Morello and FreeBSD/arm64.
	else
		if [ "${CHERIBSD_VERSION}" -le 20220314 ]; then
			vararg_flags=""
		else
			vararg_flags="-Xclang -morello-vararg=new"
		fi
		arch_cflags="${arch_cflags} -march=morello+a64c -mabi=aapcs ${vararg_flags}"
	fi
	arch_objdump_flags="--mattr=+morello"
	;;
aarch64c)
	if [ "${CHERIBSD_VERSION}" -le 20220314 ]; then
		tls_flags="-femulated-tls"
		vararg_flags=""
	elif [ "${CHERIBSD_VERSION}" -le 20220828 ]; then
		tls_flags=""
		vararg_flags="-Xclang -morello-vararg=new"
	else
		tls_flags=""
		vararg_flags="-Xclang -morello-vararg=new -Xclang -morello-bounded-memargs=caller-only"
	fi
	arch_cflags="${arch_cflags} -march=morello -mabi=purecap ${tls_flags} ${vararg_flags}"
	arch_objdump_flags="--mattr=+morello"
	;;
aarch64cb)
	if [ "${CHERIBSD_VERSION}" -lt 20230804 ]; then
		die "Unexpected CheriBSD version for the benchmark ABI: ${CHERIBSD_VERSION}."
	fi
	arch_cflags="${arch_cflags} -march=morello -mabi=purecap-benchmark -Xclang -morello-vararg=new -Xclang -morello-bounded-memargs=caller-only"
	arch_objdump_flags="--mattr=+morello"
	;;
riscv64)
	arch_cflags="${arch_cflags} -march=rv64gcxcheri -mabi=lp64d -mno-relax"
	;;
riscv64c)
	arch_cflags="${arch_cflags} -march=rv64gcxcheri -mabi=l64pc128d -mno-relax"
	;;
*)
	die "Unexpected architecture: ${arch}"
	;;
esac

#
# Use a toolchain from LLVM fore Morello for AArch64-based architectures.
# Otherwise, use CHERI LLVM.
#
case "${arch}" in
aarch64*)
	LLVM_PREFIX="${TOOLCHAIN_LOCALBASE}/llvm-morello"
	;;
*)
	LLVM_PREFIX="${TOOLCHAIN_LOCALBASE}/llvm-cheri"
	;;
esac
LLVM_BIN="${LLVM_PREFIX}/bin"
LLVM_LIB="${LLVM_PREFIX}/lib"

#
# Use toolchain libraries and base system libraries from a jail or a host,
# if the jail is emulated.
#
if [ -n "${QEMU_EMULATING}" ]; then
	TOOLCHAIN_BASE_LIB="/host/usr/local/lib:/host/usr/lib:/host/lib"
else
	case "${arch}" in
	aarch64|riscv64)
		TOOLCHAIN_BASE_LIB="/usr/lib"
		;;
	aarch64*c*|riscv64*c*)
		TOOLCHAIN_BASE_LIB="/usr/lib64"
		;;
	esac
fi
_LD_LIBRARY_PATH="${TOOLCHAIN_LOCALBASE_LIB}:${LLVM_LIB}:${TOOLCHAIN_BASE_LIB}"
if [ -n "${QEMU_EMULATING}" ]; then
	export LD_LIBRARY_PATH="${_LD_LIBRARY_PATH}"
else
	case "${arch}" in
	aarch64|riscv64)
		export LD_LIBRARY_PATH="${_LD_LIBRARY_PATH}"
		;;
	aarch64*c*|riscv64*c*)
		export LD_64_LIBRARY_PATH="${_LD_LIBRARY_PATH}"
		;;
	esac
fi

#
# Overwrite variables from make.conf so that subprocesses directly utilities.
#
export ADDR2LINE="${LLVM_BIN}/llvm-addr2line"
export AR="${LLVM_BIN}/llvm-ar"
export CC="${LLVM_BIN}/clang ${arch_cflags}"
export CPP="${LLVM_BIN}/clang-cpp ${arch_cflags}"
export CPPFILT="${LLVM_BIN}/llvm-cxxfilt"
export CXX="${LLVM_BIN}/clang++ ${arch_cflags}"
export AS="${CC}"
export LD="${LLVM_BIN}/ld.lld"
export NM="${LLVM_BIN}/llvm-nm"
export OBJCOPY="${LLVM_BIN}/llvm-objcopy"
export OBJDUMP="${LLVM_BIN}/llvm-objdump ${arch_objdump_flags}"
export RANLIB="${LLVM_BIN}/llvm-ranlib"
export READELF="${LLVM_BIN}/llvm-readelf"
export SIZE="${LLVM_BIN}/llvm-size"
export STRINGS="${LLVM_BIN}/llvm-strings"
export STRIP="${LLVM_BIN}/llvm-strip"
export XCC="${CC}"
export XCPP="${CPP}"
export XCXX="${CXX}"

#
# Finally, execute the program.
#
case "${prog}" in
addr2line)
	${ADDR2LINE} "${@}"
	;;
ar)
	${AR} "${@}"
	;;
as)
	${AS} "${@}"
	;;
c++|clang++)
	${CXX} "${@}"
	;;
c++filt)
	${CPPFILT} "${@}"
	;;
cc|clang)
	${CC} "${@}"
	;;
cpp|clang-cpp)
	${CPP} "${@}"
	;;
ld)
	${LD} "${@}"
	;;
nm)
	${NM} "${@}"
	;;
objcopy)
	${OBJCOPY} "${@}"
	;;
objdump)
	${OBJDUMP} "${@}"
	;;
ranlib)
	${RANLIB} "${@}"
	;;
readelf)
	${READELF} "${@}"
	;;
size)
	${SIZE} "${@}"
	;;
strings)
	${STRINGS} "${@}"
	;;
strip)
	${STRIP} "${@}"
	;;
*)
	die "Unexpected program: ${prog}."
	;;
esac
